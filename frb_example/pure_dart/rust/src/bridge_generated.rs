#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.62.0.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

use crate::data::MyEnum;
use crate::data::MyStruct;
use crate::new_module_system::sub_module::NewSimpleStruct;
use crate::old_module_system::sub_module::OldSimpleStruct;

// Section: wire functions

fn wire_simple_adder_impl(
    port_: MessagePort,
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "simple_adder",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Ok(simple_adder(api_a, api_b))
        },
    )
}
fn wire_simple_adder_sync_impl(
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "simple_adder_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            Ok(simple_adder_sync(api_a, api_b))
        },
    )
}
fn wire_primitive_types_impl(
    port_: MessagePort,
    my_i32: impl Wire2Api<i32> + UnwindSafe,
    my_i64: impl Wire2Api<i64> + UnwindSafe,
    my_f64: impl Wire2Api<f64> + UnwindSafe,
    my_bool: impl Wire2Api<bool> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "primitive_types",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_my_i32 = my_i32.wire2api();
            let api_my_i64 = my_i64.wire2api();
            let api_my_f64 = my_f64.wire2api();
            let api_my_bool = my_bool.wire2api();
            move |task_callback| {
                Ok(primitive_types(
                    api_my_i32,
                    api_my_i64,
                    api_my_f64,
                    api_my_bool,
                ))
            }
        },
    )
}
fn wire_primitive_types_sync_impl(
    my_i32: impl Wire2Api<i32> + UnwindSafe,
    my_i64: impl Wire2Api<i64> + UnwindSafe,
    my_f64: impl Wire2Api<f64> + UnwindSafe,
    my_bool: impl Wire2Api<bool> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "primitive_types_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_my_i32 = my_i32.wire2api();
            let api_my_i64 = my_i64.wire2api();
            let api_my_f64 = my_f64.wire2api();
            let api_my_bool = my_bool.wire2api();
            Ok(primitive_types_sync(
                api_my_i32,
                api_my_i64,
                api_my_f64,
                api_my_bool,
            ))
        },
    )
}
fn wire_primitive_u32_impl(port_: MessagePort, my_u32: impl Wire2Api<u32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "primitive_u32",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_my_u32 = my_u32.wire2api();
            move |task_callback| Ok(primitive_u32(api_my_u32))
        },
    )
}
fn wire_primitive_u32_sync_impl(
    my_u32: impl Wire2Api<u32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "primitive_u32_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_my_u32 = my_u32.wire2api();
            Ok(primitive_u32_sync(api_my_u32))
        },
    )
}
fn wire_handle_string_impl(port_: MessagePort, s: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_string",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_s = s.wire2api();
            move |task_callback| Ok(handle_string(api_s))
        },
    )
}
fn wire_handle_string_sync_impl(s: impl Wire2Api<String> + UnwindSafe) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "handle_string_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_s = s.wire2api();
            Ok(handle_string_sync(api_s))
        },
    )
}
fn wire_handle_return_unit_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_return_unit",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(handle_return_unit()),
    )
}
fn wire_handle_return_unit_sync_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "handle_return_unit_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Ok(handle_return_unit_sync()),
    )
}
fn wire_handle_vec_u8_impl(port_: MessagePort, v: impl Wire2Api<Vec<u8>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_vec_u8",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_v = v.wire2api();
            move |task_callback| Ok(handle_vec_u8(api_v))
        },
    )
}
fn wire_handle_vec_u8_sync_impl(v: impl Wire2Api<Vec<u8>> + UnwindSafe) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "handle_vec_u8_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_v = v.wire2api();
            Ok(handle_vec_u8_sync(api_v))
        },
    )
}
fn wire_handle_vec_of_primitive_impl(port_: MessagePort, n: impl Wire2Api<i32> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_vec_of_primitive",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_n = n.wire2api();
            move |task_callback| Ok(handle_vec_of_primitive(api_n))
        },
    )
}
fn wire_handle_vec_of_primitive_sync_impl(
    n: impl Wire2Api<i32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "handle_vec_of_primitive_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_n = n.wire2api();
            Ok(handle_vec_of_primitive_sync(api_n))
        },
    )
}
fn wire_handle_zero_copy_vec_of_primitive_impl(
    port_: MessagePort,
    n: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_zero_copy_vec_of_primitive",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_n = n.wire2api();
            move |task_callback| Ok(handle_zero_copy_vec_of_primitive(api_n))
        },
    )
}
fn wire_handle_zero_copy_vec_of_primitive_sync_impl(
    n: impl Wire2Api<i32> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "handle_zero_copy_vec_of_primitive_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_n = n.wire2api();
            Ok(handle_zero_copy_vec_of_primitive_sync(api_n))
        },
    )
}
fn wire_handle_struct_impl(
    port_: MessagePort,
    arg: impl Wire2Api<MySize> + UnwindSafe,
    boxed: impl Wire2Api<Box<MySize>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            let api_boxed = boxed.wire2api();
            move |task_callback| Ok(handle_struct(api_arg, api_boxed))
        },
    )
}
fn wire_handle_struct_sync_impl(
    arg: impl Wire2Api<MySize> + UnwindSafe,
    boxed: impl Wire2Api<Box<MySize>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "handle_struct_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            let api_boxed = boxed.wire2api();
            Ok(handle_struct_sync(api_arg, api_boxed))
        },
    )
}
fn wire_handle_newtype_impl(port_: MessagePort, arg: impl Wire2Api<NewTypeInt> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_newtype",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Ok(handle_newtype(api_arg))
        },
    )
}
fn wire_handle_newtype_sync_impl(
    arg: impl Wire2Api<NewTypeInt> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "handle_newtype_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_arg = arg.wire2api();
            Ok(handle_newtype_sync(api_arg))
        },
    )
}
fn wire_handle_list_of_struct_impl(port_: MessagePort, l: impl Wire2Api<Vec<MySize>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_list_of_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_l = l.wire2api();
            move |task_callback| Ok(handle_list_of_struct(api_l))
        },
    )
}
fn wire_handle_list_of_struct_sync_impl(
    l: impl Wire2Api<Vec<MySize>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "handle_list_of_struct_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_l = l.wire2api();
            Ok(handle_list_of_struct_sync(api_l))
        },
    )
}
fn wire_handle_string_list_impl(
    port_: MessagePort,
    names: impl Wire2Api<Vec<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_string_list",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_names = names.wire2api();
            move |task_callback| Ok(handle_string_list(api_names))
        },
    )
}
fn wire_handle_string_list_sync_impl(
    names: impl Wire2Api<Vec<String>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "handle_string_list_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_names = names.wire2api();
            Ok(handle_string_list_sync(api_names))
        },
    )
}
fn wire_handle_complex_struct_impl(port_: MessagePort, s: impl Wire2Api<MyTreeNode> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_complex_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_s = s.wire2api();
            move |task_callback| Ok(handle_complex_struct(api_s))
        },
    )
}
fn wire_handle_complex_struct_sync_impl(
    s: impl Wire2Api<MyTreeNode> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "handle_complex_struct_sync",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_s = s.wire2api();
            Ok(handle_complex_struct_sync(api_s))
        },
    )
}
fn wire_handle_sync_return_impl(
    mode: impl Wire2Api<String> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "handle_sync_return",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_mode = mode.wire2api();
            handle_sync_return(api_mode)
        },
    )
}
fn wire_handle_stream_impl(port_: MessagePort, arg: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_stream",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| Ok(handle_stream(task_callback.stream_sink(), api_arg))
        },
    )
}
fn wire_handle_stream_of_struct_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_stream_of_struct",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || move |task_callback| Ok(handle_stream_of_struct(task_callback.stream_sink())),
    )
}
fn wire_return_err_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "return_err",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| return_err(),
    )
}
fn wire_return_panic_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "return_panic",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(return_panic()),
    )
}
fn wire_handle_optional_return_impl(
    port_: MessagePort,
    left: impl Wire2Api<f64> + UnwindSafe,
    right: impl Wire2Api<f64> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_optional_return",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_left = left.wire2api();
            let api_right = right.wire2api();
            move |task_callback| Ok(handle_optional_return(api_left, api_right))
        },
    )
}
fn wire_handle_optional_struct_impl(
    port_: MessagePort,
    document: impl Wire2Api<Option<String>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_optional_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_document = document.wire2api();
            move |task_callback| Ok(handle_optional_struct(api_document))
        },
    )
}
fn wire_handle_optional_increment_impl(
    port_: MessagePort,
    opt: impl Wire2Api<Option<ExoticOptionals>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_optional_increment",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opt = opt.wire2api();
            move |task_callback| Ok(handle_optional_increment(api_opt))
        },
    )
}
fn wire_handle_increment_boxed_optional_impl(
    port_: MessagePort,
    opt: impl Wire2Api<Option<Box<f64>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_increment_boxed_optional",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opt = opt.wire2api();
            move |task_callback| Ok(handle_increment_boxed_optional(api_opt))
        },
    )
}
fn wire_handle_option_box_arguments_impl(
    port_: MessagePort,
    i8box: impl Wire2Api<Option<Box<i8>>> + UnwindSafe,
    u8box: impl Wire2Api<Option<Box<u8>>> + UnwindSafe,
    i32box: impl Wire2Api<Option<Box<i32>>> + UnwindSafe,
    i64box: impl Wire2Api<Option<Box<i64>>> + UnwindSafe,
    f64box: impl Wire2Api<Option<Box<f64>>> + UnwindSafe,
    boolbox: impl Wire2Api<Option<Box<bool>>> + UnwindSafe,
    structbox: impl Wire2Api<Option<Box<ExoticOptionals>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_option_box_arguments",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_i8box = i8box.wire2api();
            let api_u8box = u8box.wire2api();
            let api_i32box = i32box.wire2api();
            let api_i64box = i64box.wire2api();
            let api_f64box = f64box.wire2api();
            let api_boolbox = boolbox.wire2api();
            let api_structbox = structbox.wire2api();
            move |task_callback| {
                Ok(handle_option_box_arguments(
                    api_i8box,
                    api_u8box,
                    api_i32box,
                    api_i64box,
                    api_f64box,
                    api_boolbox,
                    api_structbox,
                ))
            }
        },
    )
}
fn wire_print_note_impl(port_: MessagePort, note: impl Wire2Api<Note> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "print_note",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_note = note.wire2api();
            move |task_callback| Ok(print_note(api_note))
        },
    )
}
fn wire_handle_return_enum_impl(port_: MessagePort, input: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_return_enum",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| Ok(handle_return_enum(api_input))
        },
    )
}
fn wire_handle_enum_parameter_impl(
    port_: MessagePort,
    weekday: impl Wire2Api<Weekdays> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_enum_parameter",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_weekday = weekday.wire2api();
            move |task_callback| Ok(handle_enum_parameter(api_weekday))
        },
    )
}
fn wire_handle_customized_struct_impl(
    port_: MessagePort,
    val: impl Wire2Api<Customized> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_customized_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_val = val.wire2api();
            move |task_callback| Ok(handle_customized_struct(api_val))
        },
    )
}
fn wire_handle_enum_struct_impl(port_: MessagePort, val: impl Wire2Api<KitchenSink> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_enum_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_val = val.wire2api();
            move |task_callback| Ok(handle_enum_struct(api_val))
        },
    )
}
fn wire_use_imported_struct_impl(
    port_: MessagePort,
    my_struct: impl Wire2Api<MyStruct> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "use_imported_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_my_struct = my_struct.wire2api();
            move |task_callback| Ok(use_imported_struct(api_my_struct))
        },
    )
}
fn wire_use_imported_enum_impl(port_: MessagePort, my_enum: impl Wire2Api<MyEnum> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "use_imported_enum",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_my_enum = my_enum.wire2api();
            move |task_callback| Ok(use_imported_enum(api_my_enum))
        },
    )
}
fn wire_get_app_settings_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_app_settings",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(mirror_ApplicationSettings(get_app_settings())),
    )
}
fn wire_get_fallible_app_settings_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_fallible_app_settings",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(mirror_ApplicationSettings(get_fallible_app_settings()?)),
    )
}
fn wire_is_app_embedded_impl(
    port_: MessagePort,
    app_settings: impl Wire2Api<ApplicationSettings> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "is_app_embedded",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_app_settings = app_settings.wire2api();
            move |task_callback| Ok(is_app_embedded(api_app_settings))
        },
    )
}
fn wire_get_message_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_message",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(mirror_ApplicationMessage(get_message())),
    )
}
fn wire_repeat_number_impl(
    port_: MessagePort,
    num: impl Wire2Api<i32> + UnwindSafe,
    times: impl Wire2Api<usize> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "repeat_number",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_num = num.wire2api();
            let api_times = times.wire2api();
            move |task_callback| Ok(mirror_Numbers(repeat_number(api_num, api_times)))
        },
    )
}
fn wire_repeat_sequence_impl(
    port_: MessagePort,
    seq: impl Wire2Api<i32> + UnwindSafe,
    times: impl Wire2Api<usize> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "repeat_sequence",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_seq = seq.wire2api();
            let api_times = times.wire2api();
            move |task_callback| Ok(mirror_Sequences(repeat_sequence(api_seq, api_times)))
        },
    )
}
fn wire_first_number_impl(port_: MessagePort, nums: impl Wire2Api<Numbers> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "first_number",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_nums = nums.wire2api();
            move |task_callback| Ok(first_number(api_nums))
        },
    )
}
fn wire_first_sequence_impl(port_: MessagePort, seqs: impl Wire2Api<Sequences> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "first_sequence",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_seqs = seqs.wire2api();
            move |task_callback| Ok(first_sequence(api_seqs))
        },
    )
}
fn wire_get_array_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_array",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(get_array()),
    )
}
fn wire_get_complex_array_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_complex_array",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(get_complex_array()),
    )
}
fn wire_get_usize_impl(port_: MessagePort, u: impl Wire2Api<usize> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_usize",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_u = u.wire2api();
            move |task_callback| Ok(get_usize(api_u))
        },
    )
}
fn wire_next_user_id_impl(port_: MessagePort, user_id: impl Wire2Api<UserId> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "next_user_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_user_id = user_id.wire2api();
            move |task_callback| Ok(next_user_id(api_user_id))
        },
    )
}
fn wire_register_event_listener_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "register_event_listener",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || move |task_callback| register_event_listener(task_callback.stream_sink()),
    )
}
fn wire_close_event_listener_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "close_event_listener",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(close_event_listener()),
    )
}
fn wire_create_event_impl(
    port_: MessagePort,
    address: impl Wire2Api<String> + UnwindSafe,
    payload: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_event",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_address = address.wire2api();
            let api_payload = payload.wire2api();
            move |task_callback| Ok(create_event(api_address, api_payload))
        },
    )
}
fn wire_handle_stream_sink_at_1_impl(
    port_: MessagePort,
    key: impl Wire2Api<u32> + UnwindSafe,
    max: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_stream_sink_at_1",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_key = key.wire2api();
            let api_max = max.wire2api();
            move |task_callback| {
                Ok(handle_stream_sink_at_1(
                    api_key,
                    api_max,
                    task_callback.stream_sink(),
                ))
            }
        },
    )
}
fn wire_handle_stream_sink_at_2_impl(
    port_: MessagePort,
    key: impl Wire2Api<u32> + UnwindSafe,
    max: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_stream_sink_at_2",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_key = key.wire2api();
            let api_max = max.wire2api();
            move |task_callback| {
                Ok(handle_stream_sink_at_2(
                    api_key,
                    task_callback.stream_sink(),
                    api_max,
                ))
            }
        },
    )
}
fn wire_handle_stream_sink_at_3_impl(
    port_: MessagePort,
    key: impl Wire2Api<u32> + UnwindSafe,
    max: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_stream_sink_at_3",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_key = key.wire2api();
            let api_max = max.wire2api();
            move |task_callback| {
                Ok(handle_stream_sink_at_3(
                    task_callback.stream_sink(),
                    api_key,
                    api_max,
                ))
            }
        },
    )
}
fn wire_get_sum_struct_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_sum_struct",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(get_sum_struct()),
    )
}
fn wire_get_sum_array_impl(
    port_: MessagePort,
    a: impl Wire2Api<u32> + UnwindSafe,
    b: impl Wire2Api<u32> + UnwindSafe,
    c: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_sum_array",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            let api_c = c.wire2api();
            move |task_callback| Ok(get_sum_array(api_a, api_b, api_c))
        },
    )
}
fn wire_multiply_by_ten_impl(port_: MessagePort, measure: impl Wire2Api<Measure> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "multiply_by_ten",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_measure = measure.wire2api();
            move |task_callback| Ok(multiply_by_ten(api_measure))
        },
    )
}
fn wire_call_old_module_system_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "call_old_module_system",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(call_old_module_system()),
    )
}
fn wire_call_new_module_system_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "call_new_module_system",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(call_new_module_system()),
    )
}
fn wire_handle_big_buffers_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_big_buffers",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(handle_big_buffers()),
    )
}
fn wire_datetime_utc_impl(
    port_: MessagePort,
    d: impl Wire2Api<chrono::DateTime<chrono::Utc>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "datetime_utc",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_d = d.wire2api();
            move |task_callback| Ok(datetime_utc(api_d))
        },
    )
}
fn wire_datetime_local_impl(
    port_: MessagePort,
    d: impl Wire2Api<chrono::DateTime<chrono::Local>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "datetime_local",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_d = d.wire2api();
            move |task_callback| Ok(datetime_local(api_d))
        },
    )
}
fn wire_naivedatetime_impl(
    port_: MessagePort,
    d: impl Wire2Api<chrono::NaiveDateTime> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "naivedatetime",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_d = d.wire2api();
            move |task_callback| Ok(naivedatetime(api_d))
        },
    )
}
fn wire_duration_impl(port_: MessagePort, d: impl Wire2Api<chrono::Duration> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "duration",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_d = d.wire2api();
            move |task_callback| Ok(duration(api_d))
        },
    )
}
fn wire_how_long_does_it_take_impl(
    port_: MessagePort,
    mine: impl Wire2Api<FeatureChrono> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "how_long_does_it_take",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_mine = mine.wire2api();
            move |task_callback| how_long_does_it_take(api_mine)
        },
    )
}
fn wire_handle_uuid_impl(port_: MessagePort, id: impl Wire2Api<uuid::Uuid> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_uuid",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| handle_uuid(api_id)
        },
    )
}
fn wire_handle_uuids_impl(port_: MessagePort, ids: impl Wire2Api<Vec<uuid::Uuid>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_uuids",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_ids = ids.wire2api();
            move |task_callback| handle_uuids(api_ids)
        },
    )
}
fn wire_handle_nested_uuids_impl(port_: MessagePort, ids: impl Wire2Api<FeatureUuid> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_nested_uuids",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_ids = ids.wire2api();
            move |task_callback| handle_nested_uuids(api_ids)
        },
    )
}
fn wire_new_msgid_impl(port_: MessagePort, id: impl Wire2Api<[u8; 32]> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new_msgid",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Ok(new_msgid(api_id))
        },
    )
}
fn wire_use_msgid_impl(port_: MessagePort, id: impl Wire2Api<MessageId> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "use_msgid",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Ok(use_msgid(api_id))
        },
    )
}
fn wire_boxed_blob_impl(port_: MessagePort, blob: impl Wire2Api<Box<[u8; 1600]>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "boxed_blob",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_blob = blob.wire2api();
            move |task_callback| Ok(boxed_blob(api_blob))
        },
    )
}
fn wire_use_boxed_blob_impl(port_: MessagePort, blob: impl Wire2Api<Box<Blob>> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "use_boxed_blob",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_blob = blob.wire2api();
            move |task_callback| Ok(use_boxed_blob(api_blob))
        },
    )
}
fn wire_return_boxed_feed_id_impl(port_: MessagePort, id: impl Wire2Api<[u8; 8]> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "return_boxed_feed_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Ok((*return_boxed_feed_id(api_id)))
        },
    )
}
fn wire_return_boxed_raw_feed_id_impl(port_: MessagePort, id: impl Wire2Api<FeedId> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "return_boxed_raw_feed_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Ok((*return_boxed_raw_feed_id(api_id)))
        },
    )
}
fn wire_test_id_impl(port_: MessagePort, id: impl Wire2Api<TestId> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "test_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Ok(test_id(api_id))
        },
    )
}
fn wire_last_number_impl(port_: MessagePort, array: impl Wire2Api<[f64; 16]> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "last_number",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_array = array.wire2api();
            move |task_callback| Ok(last_number(api_array))
        },
    )
}
fn wire_nested_id_impl(port_: MessagePort, id: impl Wire2Api<[TestId; 4]> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "nested_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_id = id.wire2api();
            move |task_callback| Ok(nested_id(api_id))
        },
    )
}
fn wire_sync_accept_dart_opaque_impl(
    opaque: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "sync_accept_dart_opaque",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.wire2api();
            Ok(sync_accept_dart_opaque(api_opaque))
        },
    )
}
fn wire_async_accept_dart_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<DartOpaque> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "async_accept_dart_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Ok(async_accept_dart_opaque(api_opaque))
        },
    )
}
fn wire_loop_back_impl(port_: MessagePort, opaque: impl Wire2Api<DartOpaque> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "loop_back",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Ok(loop_back(api_opaque))
        },
    )
}
fn wire_loop_back_option_impl(port_: MessagePort, opaque: impl Wire2Api<DartOpaque> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "loop_back_option",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Ok(loop_back_option(api_opaque))
        },
    )
}
fn wire_loop_back_array_impl(port_: MessagePort, opaque: impl Wire2Api<DartOpaque> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "loop_back_array",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Ok(loop_back_array(api_opaque))
        },
    )
}
fn wire_loop_back_vec_impl(port_: MessagePort, opaque: impl Wire2Api<DartOpaque> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "loop_back_vec",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Ok(loop_back_vec(api_opaque))
        },
    )
}
fn wire_loop_back_option_get_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<Option<DartOpaque>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "loop_back_option_get",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Ok(loop_back_option_get(api_opaque))
        },
    )
}
fn wire_loop_back_array_get_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<[DartOpaque; 1]> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "loop_back_array_get",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Ok(loop_back_array_get(api_opaque))
        },
    )
}
fn wire_loop_back_vec_get_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<Vec<DartOpaque>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "loop_back_vec_get",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Ok(loop_back_vec_get(api_opaque))
        },
    )
}
fn wire_unwrap_dart_opaque_impl(
    opaque: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "unwrap_dart_opaque",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.wire2api();
            Ok(unwrap_dart_opaque(api_opaque))
        },
    )
}
fn wire_panic_unwrap_dart_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<DartOpaque> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "panic_unwrap_dart_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Ok(panic_unwrap_dart_opaque(api_opaque))
        },
    )
}
fn wire_create_opaque_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(create_opaque()),
    )
}
fn wire_create_option_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<Option<RustOpaque<HideData>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_option_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Ok(create_option_opaque(api_opaque))
        },
    )
}
fn wire_sync_create_opaque_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "sync_create_opaque",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Ok(sync_create_opaque()),
    )
}
fn wire_create_array_opaque_enum_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_array_opaque_enum",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(create_array_opaque_enum()),
    )
}
fn wire_run_enum_opaque_impl(port_: MessagePort, opaque: impl Wire2Api<EnumOpaque> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "run_enum_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Ok(run_enum_opaque(api_opaque))
        },
    )
}
fn wire_run_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<RustOpaque<HideData>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "run_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Ok(run_opaque(api_opaque))
        },
    )
}
fn wire_run_opaque_with_delay_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<RustOpaque<HideData>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "run_opaque_with_delay",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Ok(run_opaque_with_delay(api_opaque))
        },
    )
}
fn wire_opaque_array_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "opaque_array",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(opaque_array()),
    )
}
fn wire_create_sync_opaque_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_sync_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(create_sync_opaque()),
    )
}
fn wire_sync_create_sync_opaque_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "sync_create_sync_opaque",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Ok(sync_create_sync_opaque()),
    )
}
fn wire_sync_run_opaque_impl(
    opaque: impl Wire2Api<RustOpaque<NonSendHideData>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "sync_run_opaque",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.wire2api();
            Ok(sync_run_opaque(api_opaque))
        },
    )
}
fn wire_opaque_array_run_impl(
    port_: MessagePort,
    data: impl Wire2Api<[RustOpaque<HideData>; 2]> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "opaque_array_run",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_data = data.wire2api();
            move |task_callback| Ok(opaque_array_run(api_data))
        },
    )
}
fn wire_opaque_vec_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "opaque_vec",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(opaque_vec()),
    )
}
fn wire_opaque_vec_run_impl(
    port_: MessagePort,
    data: impl Wire2Api<Vec<RustOpaque<HideData>>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "opaque_vec_run",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_data = data.wire2api();
            move |task_callback| Ok(opaque_vec_run(api_data))
        },
    )
}
fn wire_create_nested_opaque_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_nested_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(create_nested_opaque()),
    )
}
fn wire_sync_loopback_impl(
    opaque: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "sync_loopback",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.wire2api();
            Ok(sync_loopback(api_opaque))
        },
    )
}
fn wire_sync_option_loopback_impl(
    opaque: impl Wire2Api<Option<DartOpaque>> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "sync_option_loopback",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.wire2api();
            Ok(sync_option_loopback(api_opaque))
        },
    )
}
fn wire_sync_option_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "sync_option",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || sync_option(),
    )
}
fn wire_sync_option_null_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "sync_option_null",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || sync_option_null(),
    )
}
fn wire_sync_option_rust_opaque_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "sync_option_rust_opaque",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || sync_option_rust_opaque(),
    )
}
fn wire_sync_option_dart_opaque_impl(
    opaque: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "sync_option_dart_opaque",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.wire2api();
            sync_option_dart_opaque(api_opaque)
        },
    )
}
fn wire_sync_void_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "sync_void",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Ok(sync_void()),
    )
}
fn wire_run_nested_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<OpaqueNested> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "run_nested_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Ok(run_nested_opaque(api_opaque))
        },
    )
}
fn wire_create_nested_dart_opaque_impl(
    port_: MessagePort,
    opaque1: impl Wire2Api<DartOpaque> + UnwindSafe,
    opaque2: impl Wire2Api<DartOpaque> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_nested_dart_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque1 = opaque1.wire2api();
            let api_opaque2 = opaque2.wire2api();
            move |task_callback| Ok(create_nested_dart_opaque(api_opaque1, api_opaque2))
        },
    )
}
fn wire_get_nested_dart_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<DartOpaqueNested> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_nested_dart_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Ok(get_nested_dart_opaque(api_opaque))
        },
    )
}
fn wire_create_enum_dart_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<DartOpaque> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "create_enum_dart_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Ok(create_enum_dart_opaque(api_opaque))
        },
    )
}
fn wire_get_enum_dart_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<EnumDartOpaque> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_enum_dart_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Ok(get_enum_dart_opaque(api_opaque))
        },
    )
}
fn wire_set_static_dart_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<DartOpaque> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "set_static_dart_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| Ok(set_static_dart_opaque(api_opaque))
        },
    )
}
fn wire_drop_static_dart_opaque_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "drop_static_dart_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(drop_static_dart_opaque()),
    )
}
fn wire_unwrap_rust_opaque_impl(
    port_: MessagePort,
    opaque: impl Wire2Api<RustOpaque<HideData>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "unwrap_rust_opaque",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_opaque = opaque.wire2api();
            move |task_callback| unwrap_rust_opaque(api_opaque)
        },
    )
}
fn wire_return_non_droppable_dart_opaque_impl(
    opaque: impl Wire2Api<DartOpaque> + UnwindSafe,
) -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "return_non_droppable_dart_opaque",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || {
            let api_opaque = opaque.wire2api();
            Ok(return_non_droppable_dart_opaque(api_opaque))
        },
    )
}
fn wire_frb_generator_test_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "frb_generator_test",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(frb_generator_test()),
    )
}
fn wire_frb_sync_generator_test_impl() -> support::WireSyncReturn {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync(
        WrapInfo {
            debug_name: "frb_sync_generator_test",
            port: None,
            mode: FfiCallMode::Sync,
        },
        move || Ok(frb_sync_generator_test()),
    )
}
fn wire_handle_type_alias_id_impl(port_: MessagePort, input: impl Wire2Api<u64> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_type_alias_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| Ok(handle_type_alias_id(api_input))
        },
    )
}
fn wire_handle_type_nest_alias_id_impl(port_: MessagePort, input: impl Wire2Api<u64> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_type_nest_alias_id",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| Ok(handle_type_nest_alias_id(api_input))
        },
    )
}
fn wire_handle_type_alias_model_impl(port_: MessagePort, input: impl Wire2Api<u64> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_type_alias_model",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_input = input.wire2api();
            move |task_callback| Ok(handle_type_alias_model(api_input))
        },
    )
}
fn wire_handle_async_fn_impl(
    port_: MessagePort,
    a: impl Wire2Api<i32> + UnwindSafe,
    b: impl Wire2Api<i32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_future(
        WrapInfo {
            debug_name: "handle_async_fn",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| async move { Ok(handle_async_fn(api_a, api_b).await) }
        },
    )
}
fn wire_handle_async_fn_fallible_impl(
    port_: MessagePort,
    mode: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_future(
        WrapInfo {
            debug_name: "handle_async_fn_fallible",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_mode = mode.wire2api();
            move |task_callback| async move { handle_async_fn_fallible(api_mode).await }
        },
    )
}
fn wire_handle_async_fn_stream_impl(port_: MessagePort, arg: impl Wire2Api<String> + UnwindSafe) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_future(
        WrapInfo {
            debug_name: "handle_async_fn_stream",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_arg = arg.wire2api();
            move |task_callback| async move {
                Ok(handle_async_fn_stream(task_callback.stream_sink(), api_arg).await)
            }
        },
    )
}
fn wire_sum__method__SumWith_impl(
    port_: MessagePort,
    that: impl Wire2Api<SumWith> + UnwindSafe,
    y: impl Wire2Api<u32> + UnwindSafe,
    z: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "sum__method__SumWith",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_y = y.wire2api();
            let api_z = z.wire2api();
            move |task_callback| Ok(SumWith::sum(&api_that, api_y, api_z))
        },
    )
}
fn wire_new__static_method__ConcatenateWith_impl(
    port_: MessagePort,
    a: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "new__static_method__ConcatenateWith",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            move |task_callback| Ok(ConcatenateWith::new(api_a))
        },
    )
}
fn wire_concatenate__method__ConcatenateWith_impl(
    port_: MessagePort,
    that: impl Wire2Api<ConcatenateWith> + UnwindSafe,
    b: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "concatenate__method__ConcatenateWith",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Ok(ConcatenateWith::concatenate(&api_that, api_b))
        },
    )
}
fn wire_concatenate_static__static_method__ConcatenateWith_impl(
    port_: MessagePort,
    a: impl Wire2Api<String> + UnwindSafe,
    b: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "concatenate_static__static_method__ConcatenateWith",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_a = a.wire2api();
            let api_b = b.wire2api();
            move |task_callback| Ok(ConcatenateWith::concatenate_static(api_a, api_b))
        },
    )
}
fn wire_handle_some_stream_sink__method__ConcatenateWith_impl(
    port_: MessagePort,
    that: impl Wire2Api<ConcatenateWith> + UnwindSafe,
    key: impl Wire2Api<u32> + UnwindSafe,
    max: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_some_stream_sink__method__ConcatenateWith",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            let api_key = key.wire2api();
            let api_max = max.wire2api();
            move |task_callback| {
                Ok(ConcatenateWith::handle_some_stream_sink(
                    &api_that,
                    api_key,
                    api_max,
                    task_callback.stream_sink(),
                ))
            }
        },
    )
}
fn wire_handle_some_stream_sink_at_1__method__ConcatenateWith_impl(
    port_: MessagePort,
    that: impl Wire2Api<ConcatenateWith> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_some_stream_sink_at_1__method__ConcatenateWith",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| {
                Ok(ConcatenateWith::handle_some_stream_sink_at_1(
                    &api_that,
                    task_callback.stream_sink(),
                ))
            }
        },
    )
}
fn wire_handle_some_static_stream_sink__static_method__ConcatenateWith_impl(
    port_: MessagePort,
    key: impl Wire2Api<u32> + UnwindSafe,
    max: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_some_static_stream_sink__static_method__ConcatenateWith",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_key = key.wire2api();
            let api_max = max.wire2api();
            move |task_callback| {
                Ok(ConcatenateWith::handle_some_static_stream_sink(
                    api_key,
                    api_max,
                    task_callback.stream_sink(),
                ))
            }
        },
    )
}
fn wire_handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith_impl(
    port_: MessagePort,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "handle_some_static_stream_sink_single_arg__static_method__ConcatenateWith",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            move |task_callback| {
                Ok(ConcatenateWith::handle_some_static_stream_sink_single_arg(
                    task_callback.stream_sink(),
                ))
            }
        },
    )
}
fn wire_sum_async__method__SumWith_impl(
    port_: MessagePort,
    that: impl Wire2Api<SumWith> + UnwindSafe,
    y: impl Wire2Api<u32> + UnwindSafe,
    z: impl Wire2Api<u32> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_future(WrapInfo{ debug_name: "sum_async__method__SumWith", port: Some(port_), mode: FfiCallMode::Normal }, move || { let api_that = that.wire2api();let api_y = y.wire2api();let api_z = z.wire2api();
move |task_callback| async move { Ok(SumWith::sum_async(&api_that, api_y, api_z).await) }
 })
}
fn wire_sum_async_fallible__method__SumWith_impl(
    port_: MessagePort,
    that: impl Wire2Api<SumWith> + UnwindSafe,
    mode: impl Wire2Api<String> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_future(WrapInfo{ debug_name: "sum_async_fallible__method__SumWith", port: Some(port_), mode: FfiCallMode::Normal }, move || { let api_that = that.wire2api();let api_mode = mode.wire2api();
move |task_callback| async move { SumWith::sum_async_fallible(&api_that, api_mode).await }
 })
}
// Section: wrapper structs

#[derive(Clone)]
struct mirror_ApplicationEnv(ApplicationEnv);

#[derive(Clone)]
struct mirror_ApplicationEnvVar(ApplicationEnvVar);

#[derive(Clone)]
struct mirror_ApplicationMessage(ApplicationMessage);

#[derive(Clone)]
struct mirror_ApplicationMode(ApplicationMode);

#[derive(Clone)]
struct mirror_ApplicationSettings(ApplicationSettings);

#[derive(Clone)]
struct mirror_Numbers(Numbers);

#[derive(Clone)]
struct mirror_Sequences(Sequences);

// Section: static checks

const _: fn() = || {
    {
        let ApplicationEnv = None::<ApplicationEnv>.unwrap();
        let _: Vec<ApplicationEnvVar> = ApplicationEnv.vars;
    }
    {
        let ApplicationEnvVar_ = None::<ApplicationEnvVar>.unwrap();
        let _: String = ApplicationEnvVar_.0;
        let _: bool = ApplicationEnvVar_.1;
    }
    match None::<ApplicationMessage>.unwrap() {
        ApplicationMessage::DisplayMessage(field0) => {
            let _: String = field0;
        }
        ApplicationMessage::RenderPixel { x, y } => {
            let _: i32 = x;
            let _: i32 = y;
        }
        ApplicationMessage::Exit => {}
    }
    match None::<ApplicationMode>.unwrap() {
        ApplicationMode::Standalone => {}
        ApplicationMode::Embedded => {}
    }
    {
        let ApplicationSettings = None::<ApplicationSettings>.unwrap();
        let _: String = ApplicationSettings.name;
        let _: String = ApplicationSettings.version;
        let _: ApplicationMode = ApplicationSettings.mode;
        let _: Box<ApplicationEnv> = ApplicationSettings.env;
        let _: Option<ApplicationEnv> = ApplicationSettings.env_optional;
    }
    {
        let Numbers_ = None::<Numbers>.unwrap();
        let _: Vec<i32> = Numbers_.0;
    }
    {
        let Sequences_ = None::<Sequences>.unwrap();
        let _: Vec<i32> = Sequences_.0;
    }
};
// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<chrono::DateTime<chrono::Local>> for i64 {
    fn wire2api(self) -> chrono::DateTime<chrono::Local> {
        let Timestamp { s, ns } = wire2api_timestamp(self);
        chrono::DateTime::<chrono::Local>::from(chrono::DateTime::<chrono::Utc>::from_utc(
            chrono::NaiveDateTime::from_timestamp_opt(s, ns)
                .expect("invalid or out-of-range datetime"),
            chrono::Utc,
        ))
    }
}
impl Wire2Api<chrono::NaiveDateTime> for i64 {
    fn wire2api(self) -> chrono::NaiveDateTime {
        let Timestamp { s, ns } = wire2api_timestamp(self);
        chrono::NaiveDateTime::from_timestamp_opt(s, ns).expect("invalid or out-of-range datetime")
    }
}
impl Wire2Api<chrono::DateTime<chrono::Utc>> for i64 {
    fn wire2api(self) -> chrono::DateTime<chrono::Utc> {
        let Timestamp { s, ns } = wire2api_timestamp(self);
        chrono::DateTime::<chrono::Utc>::from_utc(
            chrono::NaiveDateTime::from_timestamp_opt(s, ns)
                .expect("invalid or out-of-range datetime"),
            chrono::Utc,
        )
    }
}

impl Wire2Api<ApplicationMode> for i32 {
    fn wire2api(self) -> ApplicationMode {
        match self {
            0 => ApplicationMode::Standalone,
            1 => ApplicationMode::Embedded,
            _ => unreachable!("Invalid variant for ApplicationMode: {}", self),
        }
    }
}

impl Wire2Api<bool> for bool {
    fn wire2api(self) -> bool {
        self
    }
}

impl Wire2Api<f32> for f32 {
    fn wire2api(self) -> f32 {
        self
    }
}
impl Wire2Api<f64> for f64 {
    fn wire2api(self) -> f64 {
        self
    }
}

impl Wire2Api<i32> for i32 {
    fn wire2api(self) -> i32 {
        self
    }
}

impl Wire2Api<i64> for i64 {
    fn wire2api(self) -> i64 {
        self
    }
}
impl Wire2Api<i8> for i8 {
    fn wire2api(self) -> i8 {
        self
    }
}

impl Wire2Api<MyEnum> for i32 {
    fn wire2api(self) -> MyEnum {
        match self {
            0 => MyEnum::False,
            1 => MyEnum::True,
            _ => unreachable!("Invalid variant for MyEnum: {}", self),
        }
    }
}

impl Wire2Api<u32> for u32 {
    fn wire2api(self) -> u32 {
        self
    }
}
impl Wire2Api<u64> for u64 {
    fn wire2api(self) -> u64 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}
impl Wire2Api<Weekdays> for i32 {
    fn wire2api(self) -> Weekdays {
        match self {
            0 => Weekdays::Monday,
            1 => Weekdays::Tuesday,
            2 => Weekdays::Wednesday,
            3 => Weekdays::Thursday,
            4 => Weekdays::Friday,
            5 => Weekdays::Saturday,
            6 => Weekdays::Sunday,
            _ => unreachable!("Invalid variant for Weekdays: {}", self),
        }
    }
}
// Section: impl IntoDart

impl support::IntoDart for mirror_ApplicationEnv {
    fn into_dart(self) -> support::DartAbi {
        vec![self
            .0
            .vars
            .into_iter()
            .map(|v| mirror_ApplicationEnvVar(v))
            .collect::<Vec<_>>()
            .into_dart()]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ApplicationEnv {}

impl support::IntoDart for mirror_ApplicationEnvVar {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0 .0.into_dart(), self.0 .1.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ApplicationEnvVar {}

impl support::IntoDart for mirror_ApplicationMessage {
    fn into_dart(self) -> support::DartAbi {
        match self.0 {
            ApplicationMessage::DisplayMessage(field0) => vec![0.into_dart(), field0.into_dart()],
            ApplicationMessage::RenderPixel { x, y } => {
                vec![1.into_dart(), x.into_dart(), y.into_dart()]
            }
            ApplicationMessage::Exit => vec![2.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ApplicationMessage {}
impl support::IntoDart for mirror_ApplicationMode {
    fn into_dart(self) -> support::DartAbi {
        match self.0 {
            ApplicationMode::Standalone => 0,
            ApplicationMode::Embedded => 1,
        }
        .into_dart()
    }
}
impl support::IntoDart for mirror_ApplicationSettings {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.0.name.into_dart(),
            self.0.version.into_dart(),
            mirror_ApplicationMode(self.0.mode).into_dart(),
            mirror_ApplicationEnv((*self.0.env)).into_dart(),
            self.0
                .env_optional
                .map(|v| mirror_ApplicationEnv(v))
                .into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_ApplicationSettings {}

impl support::IntoDart for Attribute {
    fn into_dart(self) -> support::DartAbi {
        vec![self.key.into_dart(), self.value.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Attribute {}

impl support::IntoDart for BigBuffers {
    fn into_dart(self) -> support::DartAbi {
        vec![self.int64.into_dart(), self.uint64.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for BigBuffers {}

impl support::IntoDart for Blob {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Blob {}

impl support::IntoDart for ConcatenateWith {
    fn into_dart(self) -> support::DartAbi {
        vec![self.a.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ConcatenateWith {}

impl support::IntoDart for DartOpaqueNested {
    fn into_dart(self) -> support::DartAbi {
        vec![self.first.into_dart(), self.second.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for DartOpaqueNested {}

impl support::IntoDart for Distance {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Unknown => vec![0.into_dart()],
            Self::Map(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Distance {}
impl support::IntoDart for Element {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.tag.into_dart(),
            self.text.into_dart(),
            self.attributes.into_dart(),
            self.children.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Element {}

impl support::IntoDart for EnumDartOpaque {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Primitive(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::Opaque(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumDartOpaque {}
impl support::IntoDart for EnumOpaque {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Struct(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::Primitive(field0) => vec![1.into_dart(), field0.into_dart()],
            Self::TraitObj(field0) => vec![2.into_dart(), field0.into_dart()],
            Self::Mutex(field0) => vec![3.into_dart(), field0.into_dart()],
            Self::RwLock(field0) => vec![4.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for EnumOpaque {}
impl support::IntoDart for Event {
    fn into_dart(self) -> support::DartAbi {
        vec![self.address.into_dart(), self.payload.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Event {}

impl support::IntoDart for ExoticOptionals {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.int32.into_dart(),
            self.int64.into_dart(),
            self.float64.into_dart(),
            self.boolean.into_dart(),
            self.zerocopy.into_dart(),
            self.int8list.into_dart(),
            self.uint8list.into_dart(),
            self.int32list.into_dart(),
            self.float32list.into_dart(),
            self.float64list.into_dart(),
            self.attributes.into_dart(),
            self.attributes_nullable.into_dart(),
            self.nullable_attributes.into_dart(),
            self.newtypeint.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ExoticOptionals {}

impl support::IntoDart for FeatureUuid {
    fn into_dart(self) -> support::DartAbi {
        vec![self.one.into_dart(), self.many.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for FeatureUuid {}

impl support::IntoDart for FeedId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for FeedId {}

impl support::IntoDart for KitchenSink {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Empty => vec![0.into_dart()],
            Self::Primitives {
                int32,
                float64,
                boolean,
            } => vec![
                1.into_dart(),
                int32.into_dart(),
                float64.into_dart(),
                boolean.into_dart(),
            ],
            Self::Nested(field0, field1) => {
                vec![2.into_dart(), field0.into_dart(), field1.into_dart()]
            }
            Self::Optional(field0, field1) => {
                vec![3.into_dart(), field0.into_dart(), field1.into_dart()]
            }
            Self::Buffer(field0) => vec![4.into_dart(), field0.into_dart()],
            Self::Enums(field0) => vec![5.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for KitchenSink {}

impl support::IntoDart for Log {
    fn into_dart(self) -> support::DartAbi {
        vec![self.key.into_dart(), self.value.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Log {}

impl support::IntoDart for Log2 {
    fn into_dart(self) -> support::DartAbi {
        vec![self.key.into_dart(), self.value.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Log2 {}

impl support::IntoDart for Measure {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Speed(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::Distance(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Measure {}
impl support::IntoDart for MessageId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MessageId {}

impl support::IntoDart for MyEnum {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::False => 0,
            Self::True => 1,
        }
        .into_dart()
    }
}
impl support::IntoDart for MySize {
    fn into_dart(self) -> support::DartAbi {
        vec![self.width.into_dart(), self.height.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MySize {}

impl support::IntoDart for MyStreamEntry {
    fn into_dart(self) -> support::DartAbi {
        vec![self.hello.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MyStreamEntry {}

impl support::IntoDart for MyStruct {
    fn into_dart(self) -> support::DartAbi {
        vec![self.content.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MyStruct {}

impl support::IntoDart for MyTreeNode {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.value_i32.into_dart(),
            self.value_vec_u8.into_dart(),
            self.value_boolean.into_dart(),
            self.children.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for MyTreeNode {}

impl support::IntoDart for NewSimpleStruct {
    fn into_dart(self) -> support::DartAbi {
        vec![self.field.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for NewSimpleStruct {}

impl support::IntoDart for NewTypeInt {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for NewTypeInt {}

impl support::IntoDart for mirror_Numbers {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0 .0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_Numbers {}

impl support::IntoDart for OldSimpleStruct {
    fn into_dart(self) -> support::DartAbi {
        vec![self.field.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for OldSimpleStruct {}

impl support::IntoDart for OpaqueNested {
    fn into_dart(self) -> support::DartAbi {
        vec![self.first.into_dart(), self.second.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for OpaqueNested {}

impl support::IntoDart for Point {
    fn into_dart(self) -> support::DartAbi {
        vec![self.x.into_dart(), self.y.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Point {}

impl support::IntoDart for mirror_Sequences {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0 .0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for mirror_Sequences {}

impl support::IntoDart for Speed {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Unknown => vec![0.into_dart()],
            Self::GPS(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for Speed {}
impl support::IntoDart for SumWith {
    fn into_dart(self) -> support::DartAbi {
        vec![self.x.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for SumWith {}

impl support::IntoDart for TestId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.0.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TestId {}

impl support::IntoDart for TestModel {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.id.into_dart(),
            self.name.into_dart(),
            self.alias_enum.into_dart(),
            self.alias_struct.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for TestModel {}

impl support::IntoDart for UserId {
    fn into_dart(self) -> support::DartAbi {
        vec![self.value.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for UserId {}

impl support::IntoDart for VecOfPrimitivePack {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.int8list.into_dart(),
            self.uint8list.into_dart(),
            self.int16list.into_dart(),
            self.uint16list.into_dart(),
            self.uint32list.into_dart(),
            self.int32list.into_dart(),
            self.uint64list.into_dart(),
            self.int64list.into_dart(),
            self.float32list.into_dart(),
            self.float64list.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for VecOfPrimitivePack {}

impl support::IntoDart for Weekdays {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::Monday => 0,
            Self::Tuesday => 1,
            Self::Wednesday => 2,
            Self::Thursday => 3,
            Self::Friday => 4,
            Self::Saturday => 5,
            Self::Sunday => 6,
        }
        .into_dart()
    }
}
impl support::IntoDart for ZeroCopyVecOfPrimitivePack {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.int8list.into_dart(),
            self.uint8list.into_dart(),
            self.int16list.into_dart(),
            self.uint16list.into_dart(),
            self.uint32list.into_dart(),
            self.int32list.into_dart(),
            self.uint64list.into_dart(),
            self.int64list.into_dart(),
            self.float32list.into_dart(),
            self.float64list.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for ZeroCopyVecOfPrimitivePack {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
#[path = "bridge_generated.web.rs"]
mod web;
#[cfg(target_family = "wasm")]
pub use web::*;

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
